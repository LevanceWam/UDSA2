This is the notes for ExerciseBuildingAHeap

Lets try to implement a heap. We normally use an array to implement a heap
even though a heap is conceptually binary tree. But because 
heaps are complete binary treea and we don't have holes in them 
it is more efficient to store them in a array 

To implement them using a array we can simply store these values
in a array so we dont need a node class with fields for left and right children
so our heap is going to have a smaller footprint in memory

so if we have a heap with 5 items (look to the screenshot)
we can store the items at these indexes
So from the top root we start at 0 then from left to right go 
1 2 3 4 

now for the bubbling up and bubbling down operations 
we need to be able to find the children or the parent of a node 
lets see how to do this 

so if we look at the index of 10 and compare it to the index of its children
what is the relationship?

if we multiply 1 by 2 and then add the 1 to it we get the index of the left children
or if we multiply 1 by 2 and then add 2 to it we get the index of the right track

Here are the formulas for calculating the index of the right and left children
Left = parent * 2 + 1
right = parent * 2 + 2

How can we find the parent of the node?
let's look at the indexes again
how do we get to 1 from 3 well we subtract 3-1 and then divide by 2
here is the formula to calculate the index of a parent node :
parent = (index-1) / 2


so this is what we need to do we need to create a heap class and we need to use a array to store 
a list of intergers and implement to operations 

Insert:
gets a interger 

Remove:
removes the root node 

remember when we implement these operations we need to bubble up or down a value 

solution:

Part 1 insert method:
first we need to create the heap class and set some private varibles 
we need to set one for the array we plan on using

we need to had a size field to keep track of the number of items in the heap
because later when we implement the remove operation we're simply going to 
decrease the value of the size 

we're not going to physically remove our items from the array

so next we are going to want to create the insert method with the parameter of value 
we are going to want to store the value to the next available spot 
so we are going to set array of size to the value:
array[size++] = value 
here the size count is going to indecate where we are going to store the value at
so if the first number we store is 1 it will have a index of 0 because the size is zero

(It is important to note that this style of programming is something we picked up 
while looking at java code because in java arrays have limits 
JS doesn't because it is dynamic if )

This is how we are going to store the item in the next available slot now we are going to work
on the bubble up operation if the item is greater than the parent
that means we should bubble up this item until it is in the right 
position

next we need to calculate the index which is size minus 1 

while we are here we also need to calculate the parent index
which is index - 1 / 2 
we also need to wrap this equation inside of a math.floor  function 
this is because some of the indexes will return a float and indexes are not stored at floats

(and remember The Math. floor method is used to round off the number passed
 as a parameter to its nearest integer in 
Downward direction of rounding i.e. towards the lesser value.)

now we are going to need a while statement 
now as long as the item at the current index is greater than the item at the parent index 
we are going to have to swap those items 

now we need to implement a swap method we are going to make this a seperate private method 
outside of the insert method because we do not want to make it super bulky

so we intialize swap with the parameters of first and second to represent the indexes
then we create the swap method 
we create a variable called temp this will hold the value of the first index
next we are going to copy the second item into the first item
finally what ever is in the temp we are going to copy it into the second item 

Back in the while statement in the insert method
now if the item in the current index is greater than the parent index we need to swap them
so we execute swap with the index and the parent index as parameters

now we need to set the index to the parent index
this way if the item is still greater than the new parent we can swap it in the next iteration

now we finish this is our bubbleup method lets move it inside of its own private method to make the code
cleaner
next we are going to call the bubbleup method in the insert method

Part 2 
Remove method:
We are going to move on to the remove operation
This one is a little more tricky because there are a few edge cases and we need to acoount for it 

so we are going to declare the remove method with no parameters 
this is because we are always going to be removing the root node which holds the largest 
value. 

The first thing we need to do is move the last node into the root node
once we do that we are going to decrement the size by one.

We can code it all into one line to make it easier on us

now once we remove the item we need to execute the bubble down operation
after we removed the item 

if the item is smaller than its childern then we need to keep doing this until we are in the right position
we are going to need a while loop
we are going to want to create a index variable and set it to 0 this is going to change every iteration
while this item[index] < children we are going to swap the values 

we are going to need to create 2 private methods to calculate the left and right child  
then we are going to write the following private methods:

first we are going to write two private methods that return the value of the left and right children
this will help the readability of the code 

then we are going to make another private method called isValidParent 
this method will check to see if the the current index is the valid child to the parent index
this will also help with the readability of our code.

now if the index of the child does not belong to the parent node we are going to have to 
run the swap operation but their is a small problem on which value are we going to swap
so we have to make another method that gets the larger index and returns that 
we will call this method the largerChildIndex

now back in the bubbledown method we are going to write a while statement to handle the rest of the code 
while index is less than or equal to the size an isValidParent is false 
we are going to swap the current index with the largerchild index 
we are then going copy the index of the largerchild into the index for the next iteration

and to end it off we are going to write a conditional for if the heap is empty to throw a error.

part 3 edge cases:

Now we have our implementation of the remove method 
there is a tiny issue in the two methods

largerChildIndex and isValidParent

Lets tackle the largerChildIndex first 
In this method we have a simple expression to return the index of the larger child 
However the node might not have any children or might only have a left or a right child 
so we need to handle these scenarios here 
how do we know if a node has a left or a write child?
we get the index of the left or right child and make sure that its value is less than or equal to the number 
of items in the heap so its a valid index.

So lets create another helper methods
hasLeftChild & hasRightChild this takes the index as a parameter
ans we are going to return if the right or left child index is less than or equal to the size

back to the largerChildIndex method 
we want to check to see if we have a left child first 
if we dont have one this means that this node doesn't have any children 
because we always fill the heap from left to right
so if the left child is not here we are going to return the same index

Next if we do not have a right child this means that the left child is the greater one so we are going to return the 
left child index

the reason why we are doing this is because our array of items is intialize with zeros
so we can not rely on the ternary expression to determine the index of the larger child

so this is why we are checking to see if we have left and right children 
otherwise we head to the ternary expression and we compare the left and right children
and return the index of the larger child.

Part 3.5 IsValidParent method:

again where we left off we where assuming that the node has 2 children 
we are going to expand the logic and work on the scenarios where if the node doesnt have any children or only has a left
child

if we do not have a left child then we are going to return true because this is the valid node

next we are going to check if we have a right child
if we dont have one we want to make sure that the value of this node is greater than or 
equal to the left child

so if we don't have a right child then we return the value of this expression:
_array.get(this)[index] >= this[leftChild](index);

otherwise if we make it to the return statement this means that the node has 2 children so 
we have to make sure that the value of this node is greater than both of the children 

now we notice that we duplicated a expression in 2 places ao 
we are going to restructure 

if the !hasLeftChild statemtent is false this means we have a left child 
so the value if the current node should definitely be greater than or equal to left child

so we declare a variable called isValid and store _array.get(this)[index] >= this[leftChild](index);
in it so:
isValid: _array.get(this)[index] >= this[leftChild](index);

so we are going to reverse the condition of the right child we want to make sure that the value of the 
current node is greater than or equal to its right child 

so we are going to set isValid = isValid & _array.get(this)[index] >= this[rightChild](index)

then we return the value of isValid 

we can simply the expression we have for the hasRightChildren by using 
the augumented assignment operator