This is the notes for LevelOrderTraversal

Earlier we mentioned that there are 2 catergories of algoritms to traverse our trees
breadth first and depth first 

so far we have been working with depth now we can look into breadth also known 
as level order traversal 

in level order traversal we go level by level we start from the top we print 20
then we go to the second level and we print 10 and 30 and so on

so how do we implement this? 
well first we need to find how many levels do we have this is equal to the height of our tree
every node has a height property 

the leaf nodes at the bottom start at 0 and as we go up the tree the number increases
the height of the tree equals the height of the root and this equals the number of edges in the longest
path 

so using our example tree the height of that tree is 3
once we know the height we can use a for loop to print the nodes at each level.

So in code using the tree that we built
we are going to create a public method traverseLevelOrder
inside of the method we are going to create a for loop
set i to 0 and as long as i is less than or equal to height ( we are calling the height function here because it will return a value)
we will increment by 1 after each iteration

after each iteration we are going to call kdistance we want to find the nodes that 
are present at each distance in this case levels so this will go down the 
tree level by level and print the nodes on the level. 